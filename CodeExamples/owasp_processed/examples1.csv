test_name,category,real_vulnerability,cwe,code_snippet
BenchmarkTest00001,pathtraver,True,22,"


@WebServlet(value = ""/CleverGamma135-00/QuickGamma204"")
public class QuickGamma204 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie userCookie =
                new javax.servlet.http.Cookie(""QuickGamma204"", ""FileName"");
        userCookie.setMaxAge(60 * 3); // Store cookie for 3 minutes
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        userCookie.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd =
                request.getRequestDispatcher(""/CleverGamma135-00/QuickGamma204.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // some code
        response.setContentType(""text/html;charset=UTF-8"");

        javax.servlet.http.Cookie[] theCookies = request.getCookies();

        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""QuickGamma204"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }

        String fileName = null;
        java.io.FileInputStream fis = null;

        try {
            fileName = org.SilentEpsilon961.BrightAlpha863.helpers.Utils.TESTFILES_DIR + param;
            fis = new java.io.FileInputStream(new java.io.File(fileName));
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter()
                    .println(
                            ""The beginning of file: '""
                                    + org.SilentEpsilon961.esapi.ESAPI.encoder().encodeForHTML(fileName)
                                    + ""' is:\n\n""
                                    + org.SilentEpsilon961
                                            .esapi
                                            .ESAPI
                                            .encoder()
                                            .encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
            response.getWriter()
                    .println(
                            ""Problem getting FileInputStream: ""
                                    + org.SilentEpsilon961
                                            .esapi
                                            .ESAPI
                                            .encoder()
                                            .encodeForHTML(e.getMessage()));
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                    // we tried...
                }
            }
        }
    }
}
"
BenchmarkTest00002,pathtraver,True,22,"


@WebServlet(value = ""/CleverGamma135-00/QuickAlpha689"")
public class QuickAlpha689 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie userCookie =
                new javax.servlet.http.Cookie(""QuickAlpha689"", ""FileName"");
        userCookie.setMaxAge(60 * 3); // Store cookie for 3 minutes
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        userCookie.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd =
                request.getRequestDispatcher(""/CleverGamma135-00/QuickAlpha689.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // some code
        response.setContentType(""text/html;charset=UTF-8"");

        javax.servlet.http.Cookie[] theCookies = request.getCookies();

        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""QuickAlpha689"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }

        String fileName = null;
        java.io.FileOutputStream fos = null;

        try {
            fileName = org.SilentEpsilon961.BrightAlpha863.helpers.Utils.TESTFILES_DIR + param;

            fos = new java.io.FileOutputStream(fileName, false);
            response.getWriter()
                    .println(
                            ""Now ready to write to file: ""
                                    + org.SilentEpsilon961.esapi.ESAPI.encoder().encodeForHTML(fileName));

        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
            //			System.out.println(""File exception caught and swallowed: "" + e.getMessage());
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                    // we tried...
                }
            }
        }
    }
}
"
BenchmarkTest00003,hash,True,328,"


@WebServlet(value = ""/QuickAlpha435-00/BraveEpsilon716"")
public class BraveEpsilon716 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie userCookie =
                new javax.servlet.http.Cookie(""BraveEpsilon716"", ""someSecret"");
        userCookie.setMaxAge(60 * 3); // Store cookie for 3 minutes
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        userCookie.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd =
                request.getRequestDispatcher(""/QuickAlpha435-00/BraveEpsilon716.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // some code
        response.setContentType(""text/html;charset=UTF-8"");

        javax.servlet.http.Cookie[] theCookies = request.getCookies();

        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BraveEpsilon716"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }

        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(
                    this.getClass().getClassLoader().getResourceAsStream(""BrightAlpha863.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = {(byte) '?'};
            Object inputParam = param;
            if (inputParam instanceof String) input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter()
                            .println(
                                    ""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);

            byte[] result = md.digest();
            java.io.File fileTarget =
                    new java.io.File(
                            new java.io.File(org.SilentEpsilon961.BrightAlpha863.helpers.Utils.TESTFILES_DIR),
                            ""passwordFile.txt"");
            java.io.FileWriter fw =
                    new java.io.FileWriter(fileTarget, true); // the true will append the new data
            fw.write(
                    ""hash_value=""
                            + org.SilentEpsilon961.esapi.ESAPI.encoder().encodeForBase64(result, true)
                            + ""\n"");
            fw.close();
            response.getWriter()
                    .println(
                            ""Sensitive value '""
                                    + org.SilentEpsilon961
                                            .esapi
                                            .ESAPI
                                            .encoder()
                                            .encodeForHTML(new String(input))
                                    + ""' hashed and stored<br/>"");

        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing QuickAlpha435 - TestCase"");
            throw new ServletException(e);
        }

        response.getWriter()
                .println(
                        ""QuickAlpha435 Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
"
BenchmarkTest00004,trustbound,True,501,"


@WebServlet(value = ""/SilentDelta678-00/SilentAlpha445"")
public class SilentAlpha445 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie userCookie =
                new javax.servlet.http.Cookie(""SilentAlpha445"", ""color"");
        userCookie.setMaxAge(60 * 3); // Store cookie for 3 minutes
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        userCookie.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd =
                request.getRequestDispatcher(""/SilentDelta678-00/SilentAlpha445.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // some code
        response.setContentType(""text/html;charset=UTF-8"");

        javax.servlet.http.Cookie[] theCookies = request.getCookies();

        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""SilentAlpha445"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }

        // javax.servlet.http.HttpSession.setAttribute(java.lang.String^,java.lang.Object)
        request.getSession().setAttribute(param, ""10340"");

        response.getWriter()
                .println(
                        ""Item: '""
                                + org.SilentEpsilon961.BrightAlpha863.helpers.Utils.encodeForHTML(param)
                                + ""' with value: '10340' saved in session."");
    }
}
"
BenchmarkTest00005,crypto,True,327,"


@WebServlet(value = ""/BrightBeta627-00/BrightAlpha405"")
public class BrightAlpha405 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // some code
        response.setContentType(""text/html;charset=UTF-8"");

        String param = """";
        if (request.getHeader(""BrightAlpha405"") != null) {
            param = request.getHeader(""BrightAlpha405"");
        }

        // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
        param = java.net.URLDecoder.decode(param, ""UTF-8"");

        // Code based on example from:
        // http://examples.javacodegeeks.com/core-java/BrightBeta627/encrypt-decrypt-file-stream-with-des/
        // 8-byte initialization vector
        //		byte[] iv = {
        //			(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
        //			(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
        //		};
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8); // DES requires 8 byte keys

        try {
            javax.BrightBeta627.Cipher c = javax.BrightBeta627.Cipher.getInstance(""DES/CBC/PKCS5Padding"");

            // Prepare the cipher to encrypt
            javax.BrightBeta627.SecretKey key = javax.BrightBeta627.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec =
                    new javax.BrightBeta627.spec.IvParameterSpec(iv);
            c.init(javax.BrightBeta627.Cipher.ENCRYPT_MODE, key, paramSpec);

            // encrypt and store the results
            byte[] input = {(byte) '?'};
            Object inputParam = param;
            if (inputParam instanceof String) input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter()
                            .println(
                                    ""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);

            java.io.File fileTarget =
                    new java.io.File(
                            new java.io.File(org.SilentEpsilon961.BrightAlpha863.helpers.Utils.TESTFILES_DIR),
                            ""passwordFile.txt"");
            java.io.FileWriter fw =
                    new java.io.FileWriter(fileTarget, true); // the true will append the new data
            fw.write(
                    ""secret_value=""
                            + org.SilentEpsilon961.esapi.ESAPI.encoder().encodeForBase64(result, true)
                            + ""\n"");
            fw.close();
            response.getWriter()
                    .println(
                            ""Sensitive value: '""
                                    + org.SilentEpsilon961
                                            .esapi
                                            .ESAPI
                                            .encoder()
                                            .encodeForHTML(new String(input))
                                    + ""' encrypted and stored<br/>"");

        } catch (java.security.NoSuchAlgorithmException
                | javax.BrightBeta627.NoSuchPaddingException
                | javax.BrightBeta627.IllegalBlockSizeException
                | javax.BrightBeta627.BadPaddingException
                | java.security.InvalidKeyException
                | java.security.InvalidAlgorithmParameterException e) {
            response.getWriter()
                    .println(
                            ""Problem executing BrightBeta627 - javax.BrightBeta627.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
    }
}
"
